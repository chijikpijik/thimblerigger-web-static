buildscript {

    ext.kotlin_version = '1.2.61'
//
//    //
//    repositories {
//        mavenLocal()
//        mavenCentral()
//    }
//    dependencies {
//        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
//    }
}

plugins {
    id 'java'
    id 'kotlin2js' version '1.2.61'
}

group 'com.icenbear'
version '1.0-SNAPSHOT'

sourceCompatibility = 1.8

repositories {
    mavenCentral()
    jcenter()
}

dependencies {
//    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:0.25.0'

    compile "org.jetbrains.kotlinx:kotlinx-html-js:0.6.11"

    compile "org.jetbrains.kotlin:kotlin-stdlib-js:$kotlin_version"
    compile "org.jetbrains.kotlinx:kotlinx-coroutines-core-js:0.26.0"

    testCompile "org.jetbrains.kotlin:kotlin-test-js:$kotlin_version"
    testCompile group: 'junit', name: 'junit', version: '4.12'
}


compileKotlin2Js.kotlinOptions.metaInfo = true
compileKotlin2Js.kotlinOptions.sourceMap = true
compileKotlin2Js.kotlinOptions.outputFile = "${projectDir}/web/js/app.js"
compileKotlin2Js.kotlinOptions.suppressWarnings = true
compileKotlin2Js.kotlinOptions.verbose = true

build.doLast {
    configurations.compile.each { File file ->
        copy {
            includeEmptyDirs = false

            from zipTree(file.absolutePath)
            into "${projectDir}/web/js/lib"
            include { fileTreeElement ->
                def path = fileTreeElement.path
                path.endsWith(".js") && (path.startsWith("META-INF/resources/") || !path.startsWith("META-INF/"))
            }
        }
    }
}